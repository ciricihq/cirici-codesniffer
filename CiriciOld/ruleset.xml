<?xml version="1.0"?>
<ruleset name="CiriciOld">
  <description>Cirici's old coding standards</description>

  <exclude-pattern>\.git</exclude-pattern>
  <exclude-pattern>*/Config/*.ini.php</exclude-pattern>
  <exclude-pattern>/*/tmp/</exclude-pattern>

  <rule ref="PSR2">
    <exclude name="Squiz.ControlStructures.ControlSignature" />
    <exclude name="Generic.WhiteSpace.DisallowTabIndent" />
    <!--
    <exclude name="PSR1.Methods.CamelCapsMethodName" />
    <exclude name="Pear.NamingConventions.ValidFunctionName" />
    <exclude name="Squiz.NamingConventions.ValidFunctionName" />
    <exclude name="Generic.NamingConventions.CamelCapsFunctionName" />
  -->
  </rule>

  <rule ref="PSR1.Files.SideEffects.FoundWithSymbols">
    <severity>0</severity>
  </rule>
  <!--
    Disable namespacing sniffs
  -->
  <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
    <severity>0</severity>
  </rule>

  <!--
    Allow non camel cased method names
  -->
  <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
    <severity>0</severity>
  </rule>
  <!-- <rule ref="PEAR.NamingConventions.ValidFunctionName.NotCamelCaps">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps">
    <severity>0</severity>
  </rule> -->

  <!--
    Relax with the comments
  -->
  <rule ref="CiriciOld.Commenting.FunctionComment.Missing">
    <severity>0</severity>
  </rule>
  <rule ref="CiriciOld.Commenting.FunctionComment.ParamCommentFullStop">
    <severity>0</severity>
  </rule>
  <rule ref="CiriciOld.Commenting.FunctionComment.ThrowsNotCapital">
    <severity>0</severity>
  </rule>
  <rule ref="CiriciOld.Commenting.FunctionComment.ThrowsNoFullStop">
    <severity>0</severity>
  </rule>
  <rule ref="Generic.Files.LineLength.TooLong">
    <severity>0</severity>
  </rule>

  <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

  <rule ref="Squiz.Classes.LowercaseClassKeywords"/>

  <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
  <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
  <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
  <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
  <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

  <rule ref="Squiz.Commenting.DocCommentAlignment"/>
  <rule ref="Generic.Commenting.Todo"/>

  <!--
  We allow EOL after closing try, if and loop braces
  -->
  <rule ref="CiriciOld.ControlStructures.ControlSignature"/>

  <rule ref="Generic.Files.LineEndings"/>

  <rule ref="Generic.Formatting.NoSpaceAfterCast"/>

  <rule ref="Squiz.Operators.ValidLogicalOperators"/>

  <rule ref="Generic.PHP.DeprecatedFunctions"/>
  <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
  <rule ref="Squiz.PHP.Eval"/>
  <rule ref="Generic.PHP.ForbiddenFunctions"/>
  <rule ref="Squiz.PHP.NonExecutableCode"/>
  <rule ref="Generic.PHP.NoSilencedErrors"/>

  <rule ref="Squiz.Scope.MemberVarScope"/>
  <rule ref="Squiz.Scope.StaticThisUsage"/>

  <rule ref="Squiz.WhiteSpace.CastSpacing"/>
  <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
  <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

  <!-- Relax some src/* and tests/* rules -->
  <rule ref="PEAR.NamingConventions.ValidClassName">
    <exclude-pattern>*/tests/*</exclude-pattern>
  </rule>
  <rule ref="Squiz.Classes.ValidClassName">
    <exclude-pattern>*/tests/*</exclude-pattern>
  </rule>

  <!-- All rules in ./Sniffs are included automatically -->
</ruleset>
